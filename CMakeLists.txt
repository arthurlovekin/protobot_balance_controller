cmake_minimum_required(VERSION 3.8)
project(protobot_balance_controller)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# set the same behavior for windows as it is on linux
# (using this instead of visibility macros)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

# find dependencies
find_package(ament_cmake REQUIRED)
set(THIS_PACKAGE_INCLUDE_DEPENDS
  rclcpp
  rclcpp_lifecycle
  geometry_msgs
  pluginlib
  controller_interface
  hardware_interface
  realtime_tools
  generate_parameter_library
)
foreach(Dependency IN ITEMS ${THIS_PACKAGE_INCLUDE_DEPENDS})
  find_package(${Dependency} REQUIRED)
endforeach()
# find_package(ament_cmake REQUIRED)
# find_package(rclcpp REQUIRED)
# find_package(rclcpp_lifecycle REQUIRED)
# find_package(geometry_msgs REQUIRED)
# find_package(pluginlib REQUIRED)
# find_package(controller_interface REQUIRED)
# find_package(hardware_interface REQUIRED)
# find_package(realtime_tools REQUIRED)
# find_package(generate_parameter_library REQUIRED)

## COMPILE
# Use the generate_parameter_library to autogenerate a header file from yaml. 
generate_parameter_library(protobot_balance_controller_parameters
  src/protobot_balance_controller_parameters.yaml
)

# Compile the protobot_balance_controller as a shared library
add_library(protobot_balance_controller SHARED
  src/protobot_balance_controller.cpp
)

# # link protobot_balance_controller.cpp to its header files
# target_include_directories(protobot_balance_controller PUBLIC
#   ${PROJECT_SOURCE_DIR}/include
# )
target_include_directories(protobot_balance_controller PUBLIC
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include/protobot_balance_controller>
)

# link protobot_balance_controller.cpp to the autogenerated params header file
target_link_libraries(protobot_balance_controller PUBLIC
  protobot_balance_controller_parameters
)

ament_target_dependencies(protobot_balance_controller PUBLIC
 ${THIS_PACKAGE_INCLUDE_DEPENDS}
)

# To export the as a plugin, specify the
# 1. package with the base class and
# 2. relative path to the Plugin Declaration xml
pluginlib_export_plugin_description_file(controller_interface
  protobot_balance_controller.xml
)

if(BUILD_TESTING)
  find_package(ament_cmake_gmock REQUIRED)
  find_package(ros2_control_test_assets REQUIRED)
  find_package(controller_manager 4.0.0)
  # Handle the case where the required version of ros2_control is not found
  if(NOT controller_manager_FOUND)
    message(FATAL_ERROR "ros2_control version 4.0.0 or higher is required. "
    "Are you using the correct branch of the ros2_control_demos repository?")
  endif()

  # Add the test_protobot_balance_controller and specify its dependencies
  ament_add_gmock(test_protobot_balance_controller
    test/test_protobot_balance_controller.cpp
  )
  target_link_libraries(test_protobot_balance_controller
    protobot_balance_controller
  )
  ament_target_dependencies(test_protobot_balance_controller
  # TODO: Add these as needed
    # geometry_msgs
    # hardware_interface
    # nav_msgs
    # rclcpp
    # rclcpp_lifecycle
    # realtime_tools
    # tf2
    # tf2_msgs
  )


  # Add the test_load_protobot_balance_controller and specify its dependencies
  ament_add_gmock(test_load_protobot_balance_controller
    test/test_load_protobot_balance_controller.cpp
  )
  ament_target_dependencies(test_load_protobot_balance_controller
    controller_manager
    ros2_control_test_assets
  )

endif()

install(DIRECTORY include/
  DESTINATION include/protobot_balance_controller
)

install(TARGETS protobot_balance_controller protobot_balance_controller_parameters
  EXPORT export_protobot_balance_controller
  RUNTIME DESTINATION bin
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
)

# EXPORTS
ament_export_targets(export_protobot_balance_controller HAS_LIBRARY_TARGET)
ament_export_dependencies(${THIS_PACKAGE_INCLUDE_DEPENDS})
ament_package()
